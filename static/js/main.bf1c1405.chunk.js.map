{"version":3,"sources":["App.tsx","utils.ts","constants.ts","serviceWorker.js","index.tsx","logo.svg"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getAddon","addon","Addon","on","options","loadCurrenciesCache","console","log","error","state","currencyCache","portfolio","transactions","_this2","request","method","endpoint","query","base","then","response","date","startDate","from","moment","slice","data","reduce","hash","value","index","add","format","Number","setState","catch","react_default","a","createElement","className","src","logo","alt","href","target","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"6SAmGeA,cAlFb,SAAAA,EAAYC,GAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACxBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAWRQ,SAAW,WACT,IACE,IAAMC,EAAQ,IAAIC,QAAM,IAexB,OAbAD,EAAME,GAAG,OAAQ,SAACC,GAChBX,EAAKY,wBAGPJ,EAAME,GAAG,SAAU,cAInBF,EAAME,GAAG,SAAU,SAACC,GAElBE,QAAQC,IAAIH,KAGPH,EACP,MAAOO,GACPF,QAAQC,IAAIC,GAGd,OAAO,MA9BPf,EAAKgB,MAAQ,CACXR,MAAOR,EAAKO,WACZU,cAAe,GACfC,UAAW,KACXC,aAAc,MARQnB,qFAqCJ,IAAAoB,EAAAjB,KACpBA,KAAKa,MAAMR,MAAMa,QAAQ,CACvBC,OAAQ,MACRC,SAAU,yBACVC,MAAO,CACLC,KAAM,SAEPC,KAAK,SAACC,GACPd,QAAQC,IAAI,2BACZ,ICrDkBc,EDqDZC,GCrDYD,EDqDQD,EAASG,KCpD9BC,IAAOH,EAAKI,MAAM,EAAG,ICXL,eFgEff,EAAgBU,EAASM,KAAKC,OAAO,SAACC,EAAMC,EAAOC,GAIvD,OAHMD,IACJD,EAAKN,EAAUS,IAAID,EAAO,QAAQE,OElEjB,eFkEwCC,OAAOJ,IAE3DD,GACN,IACHtB,QAAQC,IAAI,mBAAoBG,GAChCG,EAAKqB,SAAS,CAAExB,oBACfyB,MAAM,SAAC3B,GACRF,QAAQE,MAAM,gCAAiCA,sCAKjD,OACE4B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,4DAGAF,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,wBArEQC,aGJEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.bf1c1405.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { Addon } from '@wealthica/wealthica.js/index';\nimport { getDate } from './utils';\nimport { DATE_FORMAT } from './constants';\n\ntype State = {\n  addon: any;\n  currencyCache: { [key: string]: number };\n  portfolio: any;\n  transactions: any;\n};\ntype Props = {};\n\nclass App extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n\n    this.state = {\n      addon: this.getAddon(),\n      currencyCache: {},\n      portfolio: null,\n      transactions: null,\n    };\n  }\n\n  getAddon = (): any => {\n    try {\n      const addon = new Addon({});\n\n      addon.on('init', (options: any) => {\n        this.loadCurrenciesCache();\n      });\n\n      addon.on('reload', () => {\n        // Start reloading\n      });\n\n      addon.on('update', (options: any) => {\n        // Update according to the received options\n        console.log(options);\n      });\n\n      return addon;\n    } catch (error) {\n      console.log(error);\n    }\n\n    return null;\n  }\n\n  loadCurrenciesCache() {\n    this.state.addon.request({\n      method: 'GET',\n      endpoint: 'currencies/usd/history',\n      query: {\n        base: 'cad',\n      }\n    }).then((response) => {\n      console.log('Loaded currencies data.');\n      const startDate = getDate(response.from);\n      const currencyCache = response.data.reduce((hash, value, index) => {\n        if (!!value) {\n          hash[startDate.add(index, 'days').format(DATE_FORMAT)] = Number(value);\n        }\n        return hash;\n      }, {});\n      console.log('Currency Cache: ', currencyCache);\n      this.setState({ currencyCache });\n    }).catch((error) => {\n      console.error('Failed to load currency data.', error);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Wealthica React Portfolio add using highcharts.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { PortfolioData } from './types';\nimport moment, { Moment } from 'moment';\nimport { DATE_FORMAT } from './constants';\n\n\nexport const isValidPortfolioData = (data: PortfolioData): boolean => {\n    return Boolean(data.deposit || data.income || data.interest || data.value || data.withdrawal);\n};\n\n\nexport const getDate = (date: string): Moment => {\n    return moment(date.slice(0, 10), DATE_FORMAT);\n};\n\n\nexport const getCurrencyInCAD = (date: Moment, value: number, currencyCache: any): number => {\n    return value / currencyCache.get(date);\n}","export const DATE_FORMAT = \"YYYY-MM-DD\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}