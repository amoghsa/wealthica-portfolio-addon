{"version":3,"sources":["utils.ts","constants.ts","api.ts","App.tsx","serviceWorker.js","index.tsx","logo.svg"],"names":["getDate","date","moment","slice","parseCurrencyReponse","response","from","data","reduce","hash","value","format","Number","add","parsePortfolioResponse","history","total","parseTransactionsResponse","currencyCache","transaction","type","includes","portfolioData","deposit","withdrawal","interest","income","amount","currency_amount","investment","get","getCurrencyInCAD","console","error","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getAddon","addon","Addon","on","options","loadData","log","state","combinedPortfolioData","portfolio","isLoaded","request","method","endpoint","query","base","then","_this2","setState","catch","loadCurrenciesCache","loadPortfolioData","loadTransactions","transactions","keys","forEach","dateRangeFilter","to","groups","groupsFilter","institutions","institutionsFilter","investments","investmentsFilter","_this3","react_default","a","createElement","className","src","logo","alt","href","target","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.070951c1.chunk.js","sourcesContent":["import { PortfolioData } from './types';\nimport moment, { Moment } from 'moment';\nimport { DATE_FORMAT } from './constants';\n\n\nexport const isValidPortfolioData = (data: PortfolioData): boolean => {\n    return Boolean(data.deposit || data.income || data.interest || data.value || data.withdrawal);\n};\n\n\nexport const getDate = (date: string): Moment => {\n    return moment(date.slice(0, 10), DATE_FORMAT);\n};\n\n\nexport const getCurrencyInCAD = (date: Moment, value: number, currencyCache: any): number => {\n    return value / currencyCache.get(date.format(DATE_FORMAT));\n}\n","export const DATE_FORMAT = \"YYYY-MM-DD\";","import { getDate, getCurrencyInCAD } from \"./utils\";\nimport { DATE_FORMAT } from \"./constants\";\nimport { PortfolioData } from \"./types\";\n\nexport const parseCurrencyReponse = (response: any) => {\n  const date = getDate(response.from);\n  return response.data.reduce((hash, value) => {\n    if (!!value) {\n      hash[date.format(DATE_FORMAT)] = Number(value);\n    }\n    // Move the date forward.\n    date.add(1, \"days\");\n    return hash;\n  }, {});\n};\n\nexport const parsePortfolioResponse = (response: any) => {\n  const data = response.history.total;\n  const date = getDate(data.from);\n  return data.data.reduce((hash, value) => {\n    if (!!value) {\n      hash[date.format(DATE_FORMAT)] = Number(value);\n    }\n\n    // Move the date forward.\n    date.add(1, \"days\");\n    return hash;\n  }, {});\n};\n\nexport const parseTransactionsResponse = (\n  response: any,\n  currencyCache: any\n) => {\n  return response.reduce((hash, transaction) => {\n    const type = transaction.type;\n    if ([\"sell\", \"buy\", \"transfer\"].includes(type)) {\n      return hash;\n    }\n    const date = getDate(transaction.date);\n    const portfolioData = hash[date.format(DATE_FORMAT)]\n      ? hash[date.format(DATE_FORMAT)]\n      : {\n          deposit: 0,\n          withdrawal: 0,\n          interest: 0,\n          income: 0\n        };\n\n    let amount = Number(transaction.currency_amount);\n    amount =\n      transaction.investment && \":usd\" in transaction.investment\n        ? getCurrencyInCAD(date, amount, currencyCache)\n        : amount;\n\n    if (type == \"deposit\" && portfolioData) {\n      portfolioData.deposit += amount;\n    } else if ([\"fee\", \"interest\", \"tax\"].includes(type)) {\n      portfolioData.interest += amount;\n    } else if ([\"income\", \"dividend\", \"distribution\"].includes(type)) {\n      portfolioData.income += amount;\n    } else if (type == \"withdrawal\") {\n      portfolioData.withdrawal += amount;\n    } else {\n      console.error(\"Unknown type\", type);\n    }\n    return hash;\n  }, {});\n};\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport { Addon } from \"@wealthica/wealthica.js/index\";\nimport {\n  parseCurrencyReponse,\n  parsePortfolioResponse,\n  parseTransactionsResponse\n} from \"./api\";\nimport { PortfolioData } from \"./types\";\n\ntype State = {\n  addon: any;\n  currencyCache: { [key: string]: number };\n  combinedPortfolioData: { [key: string]: PortfolioData };\n  portfolio: { [key: string]: number };\n  isLoaded: boolean;\n};\ntype Props = {};\n\nclass App extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      addon: this.getAddon(),\n      currencyCache: {},\n      combinedPortfolioData: {},\n      portfolio: {},\n      isLoaded: false\n    };\n  }\n\n  getAddon = (): any => {\n    try {\n      const addon = new Addon({});\n\n      addon.on(\"init\", options => {\n        this.loadData(options);\n      });\n\n      addon.on(\"reload\", () => {\n        // Start reloading\n      });\n\n      addon.on(\"update\", (options: any) => {\n        // Update according to the received options\n        console.log(options);\n      });\n\n      return addon;\n    } catch (error) {\n      console.log(error);\n    }\n\n    return null;\n  };\n\n  async loadCurrenciesCache() {\n    if (this.state.currencyCache) {\n      console.log(\"Skip re-loading currency cache.\");\n      return;\n    }\n    console.log(\"Loading currencies data.\");\n    await this.state.addon\n      .request({\n        method: \"GET\",\n        endpoint: \"currencies/usd/history\",\n        query: {\n          base: \"cad\"\n        }\n      })\n      .then(response => {\n        const currencyCache = parseCurrencyReponse(response);\n        console.log(\"Currency cache: \", currencyCache);\n        this.setState({ currencyCache });\n      })\n      .catch(error => {\n        console.error(\"Failed to load currency data.\", error);\n      });\n  }\n\n  async loadData(options) {\n    await this.loadCurrenciesCache();\n\n    const portfolio = await this.loadPortfolioData(options);\n    const transactions = await this.loadTransactions(options);\n    Object.keys(transactions).forEach(date => {\n      const data = transactions[date];\n      data.value = portfolio[date];\n    });\n    this.setState({ portfolio, combinedPortfolioData: transactions });\n  }\n\n  async loadPortfolioData(options) {\n    console.log(\"Loading portfolio data.\");\n    const query = {\n      from: options.dateRangeFilter && options.dateRangeFilter[0],\n      to: options.dateRangeFilter && options.dateRangeFilter[1],\n      groups: options.groupsFilter,\n      institutions: options.institutionsFilter,\n      investments:\n        options.investmentsFilter === \"all\" ? null : options.investmentsFilter\n    };\n    await this.state.addon\n      .request({\n        query,\n        method: \"GET\",\n        endpoint: \"portfolio\"\n      })\n      .then(response => {\n        const portfolio = parsePortfolioResponse(response);\n        console.log(\"Portfolio data: \", portfolio);\n        return portfolio;\n      })\n      .catch(error => {\n        console.error(\"Failed to load portfolio data.\", error);\n      });\n    return {};\n  }\n\n  async loadTransactions(options) {\n    console.log(\"Loading transactions data.\");\n    const query = {\n      groups: options.groupsFilter,\n      institutions: options.institutionsFilter,\n      investments:\n        options.investmentsFilter === \"all\" ? null : options.investmentsFilter\n    };\n    await this.state.addon\n      .request({\n        query,\n        method: \"GET\",\n        endpoint: \"transactions\"\n      })\n      .then(response => {\n        const transactions = parseTransactionsResponse(\n          response,\n          this.state.currencyCache\n        );\n        console.log(\"Transactions data: \", transactions);\n        return transactions;\n      })\n      .catch(error => {\n        console.error(\"Failed to load transactions data.\", error);\n      });\n    return {};\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>Wealthica React Portfolio add using highcharts.</p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}